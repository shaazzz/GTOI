.. code-block:: text

    DFS Start/Finish Time
    ======================

    In this section, we want to convert a graph into an array using a technique.

    There are various ideas to convert a graph into an array, one of which is the starting time. Using this idea, the given graph can be converted into an array, and various problems can be solved more easily with it.

    For each vertex, we can consider the first time the DFS algorithm enters it. In this way, each vertex has a unique number, and the vertices can be sorted based on this time to form an array.

    Suppose the array we want to create from the graph's vertices is ``a[i]``, and the time when the DFS algorithm enters vertex ``u`` is ``st[u]``. In this case, we place vertex ``u`` at index ``st[u]``, or in other words, ``a[st[u]] = u``.

    It is evident that each subtree of the DFS tree corresponds to an interval in the array.

    Finishing time is defined similarly to starting time, with the difference that it indicates the time when the DFS algorithm exits a vertex.

    Now, we will examine several problems.

Checking Ancestor-Descendant Relationship in Linear Time
--------------------------------------------------------

We are given a tree with 
:math:`n` 
vertices and 
:math:`q` 
queries. In each query, we need to check whether vertex 
:math:`u` 
is an ancestor of vertex 
:math:`v` 
or not. The solution should run in 
:math:`O(n+q)` 
time complexity.

Solution
~~~~

We use the lemma stating the necessary and sufficient condition for an ancestor-descendant relationship as follows:  
:math:`stt[u]<=stt[v] and fnt[v]<=fnt[u]`  
or  
:math:`stt[u]<=stt[v] and stt[v]<fnt[u]`  

The validity of this lemma can be easily verified.  
To solve the problem, we first perform a **DFS** traversal on the tree. Then, for each query, we check the aforementioned condition in :math:`O(1)` time.

Finding the k-th Ancestor
-------------------------

A tree 
:math:`n` 
vertices along with 
:math:`q` 
queries is given. In each query, we must find the 
:math:`k` 
-th ancestor of vertex 
:math:`v`. 
The time complexity is 
:math:`O(n+q.log(n))`

.. code-block:: text

    Solution
    ~~~~

    Consider all nodes with height :math:`h[v]-k`. Using the lemma from the previous problem, we conclude that the answer is the node with the maximum starting time (stt) less than the starting time of node :math:`v` among nodes at height :math:`k` or higher. In other words:

    - Node :math:`u` with maximum :math:`stt[u]` such that :math:`h[u] = h[v] - k` and :math:`stt[u] \leq stt[v]`.

    For each height, construct a vector containing all nodes at that height, sorted by their starting times. This can be done in :math:`O(n)`.

    Now, each query reduces to a binary search on one of these vectors!


    `Blood Cousins <https://codeforces.com/problemset/problem/208/E>`_
    -----------------------------------------------

    An :math:`n`-vertex tree is given with :math:`m` queries of the form :math:`v\ p`. For each query, output the number of nodes :math:`u` such that the :math:`p`-th ancestor of :math:`v` and :math:`u` is the same. The solution runs in :math:`O(n + q \lg(n))`.

Solution
~~~~
First, find the p-th ancestor of vertex ``v`` similar to the previous problem. Name this vertex ``w``.  
Now, the answer is the number of vertices ``u`` where:  

.. math::
    h[u] = h[v] , \quad stt[w] \leq stt[u] , \quad stt[u] < fnt[w]

That is, in the vector corresponding to vertex ``v``, we want the count of starting times within a specific interval, which can be solved with a simple binary search.

.. code-block:: python

    # p-th ancestor of vertex v
    w = find_pth_ancestor(v, p)  
    # The answer is the number of u's such that...
    answer = count_us(h, v, w)  
    # In the vector corresponding to v's height group:
    group = height_group[h[v]]  
    # Binary search for stt[w] <= stt[u] < fnt[w]
    left = bisect_left(group, stt[w])  
    right = bisect_left(group, fnt[w])  
    return right - left  

.. image:: ../images/dfs_intervals.png  
    :align: center

.. image:: images/graph_operations.png
   :align: center

Bi-connecting with Minimum Number of Paths
------------------------------------------

Given an 
:math:`n`-vertex tree with 
:math:`2k` leaves. In each operation, we can select two leaves and color all edges on the path between them. Find the minimum number of operations required to color all edges, and provide a method achieving this minimum.

Answer
~~~~~~
The minimum number of operations required is 
:math:`k`. One optimal strategy is to pair the leaves appropriately. For example, perform a DFS traversal and pair leaves based on their discovery order. 

.. code-block:: cpp
   :linenos:

   void color_edges(Tree T) {
       vector<Leaf> leaves = T.get_leaves(); 
       // For trees with 2k leaves, at most k operations are needed
       for (int i = 0; i < leaves.size() / 2; i++) {
           // Color the path between i-th and (i+k)-th leaf
           auto path = T.find_path(leaves[i], leaves[i + k]);
           path.color_edges();
       }
   }

Explanation: Pairing diametrically opposite leaves (in a DFS order) ensures each edge is colored exactly once. This works because every internal edge lies on exactly one such path when leaves are paired systematically. Time complexity remains 
:math:`O(n)`.

Solution
~~~~

Answer = k
In the following, we present the method and prove its correctness.  
If n=2, the problem is trivially solved.  
Therefore, assume n>2 and there exists at least one non-leaf vertex.  
Root the tree at a non-leaf vertex and number the leaves according to their starting times.  
Now perform the following pairing on these leaves:

.. math:: (1, k+1)
.. math:: (2, k+2)
.. math:: (3, k+3)
.. math:: ...
.. math:: (k, 2k)

Clearly, the complexity of this pairing is  
:math:`O(n)`  
.

Now we must show that all edges are colored.  
The subtree of each edge contains an interval of leaves. For an edge to be colored, there must exist a leaf pair where one end lies inside this interval and the other outside.  
Suppose the interval corresponding to the target edge is  
:math:`[l, r]`  
. We consider two cases:

**First case:**  
:math:`l \leq k` and :math:`k+1 \leq r`  
In this case:  
- If :math:`l \neq 1`, the pair :math:`(1, k+1)` falls inside the interval.  
- Otherwise, the pair :math:`(k, 2k)` will cover it.  

**Second case:**  
If the interval doesn't match the first case, assume without loss of generality that  
:math:`l, r \leq k`  
. In this case, the pair  
:math:`(r, r+k)`  
will color the edge.

Thus, in both cases the target edge is colored, and our constructed pairs are valid.

