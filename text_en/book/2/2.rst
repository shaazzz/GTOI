Distance in Trees and Graphs
============================

In this section, by introducing the concept of distance in graphs, we examine related definitions of distance both in the general case and specifically in trees. Discussing distance in trees is considerably easier than in general graphs, because as we analyzed in the previous section, the path between any two vertices in a tree is unique.

What is Distance?
--------------------

Consider two vertices :math:`u,v` in a graph. The distance between these two vertices is defined as the length (number of edges) of the shortest path between them.

Note: If two vertices are in two separate connected components, their distance is infinite.

The distance between two vertices :math:`u,v` is denoted as :math:`d(u,v)`.

Diameter
-----------

Definition: The diameter of a graph is equal to  
:math:`Max_{u,v} d(u,v)`,  
or in other words, the maximum distance between any pair of vertices in the graph.

Note that the diameter is not the longest **path**, but rather the longest **distance**. However, in a tree, the longest path and the diameter coincide. If you take the two endpoints of the longest path in a tree, there is exactly one path between them. Since this path is the longest possible, its length equals the distance between those two vertices. Thus, the diameter equals the length of the longest path.

The distinction between the longest path and the diameter becomes significant in general graphs: finding the diameter of a graph can be solved in polynomial time, whereas finding the longest path is an NP-hard problem.

Eccentricity
--------------------

If we consider the vertex name as :math:`u`, the eccentricity of :math:`u` equals the maximum :math:`d(u,v)` for all vertices :math:`v`.

If the graph is a tree and we root the tree at :math:`u`, the eccentricity of :math:`u` becomes the height of the vertex with the maximum height in the tree.

The eccentricity of vertex :math:`u` is denoted by :math:`\varepsilon{(u)}`.

.. _theorem-2-2-1:

Theorem 2.2.1
------------------

**Theorem Statement**: In a tree, the eccentricity of a vertex equals the maximum distance from that vertex to the two endpoints of the diameter.

**Proof**: We use proof by contradiction. Let vertex :math:`a` be our target vertex, and let :math:`u, v` be the two endpoints of the diameter. Let vertex :math:`b` be the vertex whose distance from :math:`a` is :math:`\varepsilon(a)` (the eccentricity of :math:`a`). If :math:`a` were one of the diameter's endpoints, the statement would trivially hold. Thus, assume :math:`a` is neither endpoint.

Hang the tree from :math:`a`. Let :math:`mh` be the vertex with the greatest height such that all three vertices :math:`b, u, v` lie in its subtree. Since :math:`mh` is the highest common ancestor of these three vertices, either :math:`mh = b` or one of :math:`mh`'s children (which is an ancestor of :math:`b`) lacks at least one of :math:`u` or :math:`v` in its subtree. This implies :math:`mh = \text{lca}(u, b)` or :math:`\text{lca}(v, b)`. Without loss of generality, assume :math:`mh = \text{lca}(u, b)`. We now prove :math:`d(b, u) > d(u, v)`, which will lead to a contradiction with the diameter's maximality.

- **Step 1**: Show :math:`d(b, u) > d(u, v)`.
- **Step 2**: Since :math:`mh = \text{lca}(b, u)`, we have :math:`d(b, u) = h(b) + h(u) - 2 \times h(mh)`.
- **Step 3**: Even if :math:`mh \neq \text{lca}(u, v)`, it remains a common ancestor, so :math:`d(u, v) \leq h(u) + h(v) - 2 \times h(mh)`.
- **Step 4**: Combining these: 
  
  .. math::
     h(b) + h(u) - 2 \times h(mh) > h(u) + h(v) - 2 \times h(mh) \implies h(b) > h(v).
  
  This contradicts the assumption that :math:`v` is an endpoint of the diameter (and thus has maximal height). Hence, the theorem is proven.

Radius and Center
--------------------

A vertex which has the minimum eccentricity among the graph's vertices is called the graph's center, and its eccentricity is called the graph's radius.

.. _theorem-2-2-2:

Theorem 2.2.2
-------------------

a) In a tree, if the diameter is :math:`Q`, then the radius is :math:`\lceil{Q/2}\rceil`.

b) In a tree, if :math:`Q` is odd, the two middle vertices of the diameter path are the centers. If :math:`Q` is even, the middle vertex of the diameter is the center.

**Proof**: First, we prove that a vertex not lying on the diameter path cannot be a center. Consider a vertex :math:`u` not on the diameter path, and let :math:`v` be a vertex on the diameter path whose distance to :math:`u` is minimal. According to Theorem 2.2.1, we have :math:`\varepsilon{(u)} = \varepsilon{(v)} + d(u,v)`. Thus, :math:`u` cannot be a center.

Now, number the vertices along the diameter path sequentially from one end (i.e., from 0 to :math:`Q`). By Theorem 2.2.1, the eccentricity of the :math:`i`-th vertex on the diameter path is :math:`\max(i, Q-i)`. The minimum of this expression occurs when :math:`i` and :math:`Q-i` have the smallest possible difference. Therefore:

- If :math:`Q` is even, the solution is :math:`\max(Q - Q/2, Q/2) = Q/2`. Hence, the radius is :math:`Q/2`, and the only center is the middle vertex of the diameter path (vertex :math:`Q/2`).
- If :math:`Q` is odd, the radius becomes :math:`\max((Q-1)/2, (Q+1)/2) = (Q+1)/2`. The only vertices on the diameter path satisfying this condition are the :math:`(Q-1)/2`-th and :math:`(Q+1)/2`-th vertices, which are the two middle vertices of the diameter path.

Centroid
-------------------

A vertex in a graph whose sum of distances to all other vertices is minimized is called the **centroid** of the graph. Similar to the previous definitions, the centroid in a tree also has an interesting property, which is stated in the following theorem.

.. _theorem-2-2-3:

Theorem 2.2.3
-----------------

a) A vertex is a centroid in a tree if and only if, when removed, the size of every connected component is at most :math:`n/2`.

b) A tree has at most two centroids. If there are two, the graph has an even number of vertices, and the two centroids are adjacent.

**Proof**  
We label the vertices and let :math:`a_i` denote the sum of distances from vertex :math:`i` to all other vertices. First, we prove the "if" part of (a). Assume vertex :math:`u` is a centroid. If removing :math:`u` results in a connected component with size greater than :math:`n/2`, consider the neighbor of :math:`u` in this component, say :math:`v`. The distance from :math:`v` to vertices within this component is one less than the distance from :math:`u` to them, while its distance to other vertices is one more than that of :math:`u`. Thus, :math:`a_v = a_u - sz + (n - sz)`, where :math:`sz` is the size of this component. Since :math:`sz > n/2`, we have :math:`n - 2 \times sz < 0`, implying :math:`a_v < a_u`. This contradicts the minimality of :math:`a_u` for a centroid, thereby proving (a).

Next, we prove that any two vertices :math:`i` and :math:`j` satisfying the "if" condition in (a) must have :math:`a_i = a_j`. Since all centroids satisfy this condition, they must share the same :math:`a_i` value. Root the tree at vertex :math:`i`. Define a variable :math:`A` such that at vertex :math:`z`, :math:`A = a_z`. Initially, :math:`A = a_i`. Traverse the path from :math:`i` to :math:`j`. When moving from a parent to its child, :math:`A` decreases by the size of the child’s subtree and increases by the number of vertices outside this subtree. Since the size of :math:`j`'s subtree (when rooted at :math:`i`) is at least :math:`n/2` (as removing :math:`j` leaves its parent’s component with size at most :math:`n/2`), the size of all ancestors’ subtrees along this path is also at least :math:`n/2`. Thus, :math:`A` either decreases or remains constant, yielding :math:`a_i \geq a_j`. Repeating this process by rooting at :math:`j` gives :math:`a_j \geq a_i`. Hence, :math:`a_i = a_j`.

For part (b), assume two centroids :math:`i` and :math:`j` exist. Root the tree at :math:`i` and traverse the path to :math:`j`. For :math:`A` to remain unchanged during traversal, the size of the child’s subtree must equal :math:`n/2`. Since the size of :math:`j`'s subtree is at least :math:`\lceil{n/2}\rceil`, :math:`j` must be a direct child of :math:`i` with subtree size exactly :math:`n/2`. This requires :math:`\lfloor{n/2}\rfloor = \lceil{n/2}\rceil`, implying :math:`n` is even. Additionally, the two centroids must be adjacent. Thus, a tree can have at most two centroids, and if two exist, the graph has an even number of vertices with the centroids adjacent. This precludes cycles, completing the proof.

Sum of Distances
-----------------------

Assume in a problem the goal is to minimize or maximize the sum of distances between every pair of vertices. Let's call this sum the **graph density**. Intuitively, the lower the graph density, the more compact the graph is, and the higher the graph density, the more spread out and expansive the graph becomes.

Additionally, for distance to be well-defined, we assume our subject of discussion is connected graphs.

.. image:: images/graph-density.png
    :alt: Graph with different densities
    :align: center

.. Minimizing Graph Density
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The distance between two vertices is at least 1. In the graph :math:`K_n`, the distance between any two vertices is exactly 1. Therefore, the minimal possible density is achieved in the graph :math:`K_n`, which equals :math:`n \choose 2`.

If we restrict the domain of discussion to trees, the problem becomes slightly more complex. However, we can still infer the following:

- Exactly :math:`n-1` pairs of vertices have a distance of exactly 1. This is because a tree has :math:`n-1` edges.
- Every pair of vertices not connected by an edge has a distance of at least 2.

Thus, the minimal possible density is at least :math:`2 \times {n \choose 2} - (n-1)`. The only example satisfying this bound is the case where the distance between any two vertices is **at most** 2. The only tree with this property is the star graph (as shown in the figure). This is because if two leaves in this graph do not share a common parent, their distance will be at least 3.

.. figure:: /_static/dot/S_7.svg
   :width: 50%
   :align: center
   :alt: This appears if the internet connection is poor

.. code-block:: python
   :linenos:

   def compute_density(graph):
       # vertices_count = تعداد راس ها
       vertices_count = graph.vertices_count()
       # edges_count = تعداد یال ها
       edges_count = graph.edges_count()
       return edges_count / vertices_count

Maximizing Graph Density
~~~~~~~~~~~~~~~~~~~~~~~~

In this case, note that if removing an edge does not disconnect the graph, we must do so. Because removing an edge increases the density (why?). Therefore, the graph with maximum density must be sought among trees (since as we stated earlier, all its edges must be bridges).

Now consider a specific vertex like :math:`u`. We claim the sum of distances from :math:`u` to all other vertices is at most :math:`n \choose 2`.

To prove this, assume we've rooted the tree at :math:`u`. For each depth level, we know how many vertices exist at that height, with the maximum height being :math:`H`. In this case, we must have at least one vertex at every height from 0 to :math:`H`. Now if there are at least two vertices at the same height, one can be moved to a higher height, thereby increasing the total sum of distances. By repeating this process, we reach a state where exactly one vertex exists at each height from 0 to :math:`n-1` (i.e., the tree becomes a path). In this case, the total sum of distances from :math:`u` will be :math:`1 + 2 + ... + (n-1) = {n \choose 2}`. Thus, we've proven that the sum of distances from any vertex :math:`u` is at most :math:`n \choose 2`.

Therefore, to establish a bound, iteratively remove a **leaf** from the tree and calculate the sum of distances from this leaf. The total sum of all these values equals the graph's density, which according to our earlier reasoning will be at most :math:`\sum\limits_{i=1}^{n} {i \choose 2} = {{n+1} \choose 3}` (by Cauchy's identity).

We can conclude that the only graph achieving equality in this bound is the path graph.

.. _support-tree:

Support Tree
------------

Suppose we have a communication network connecting :math:`n` cities. To ensure reliability, we have prepared a backup communication network so that if the main network fails, we can use the backup to maintain connectivity.

In graph terms, we have two :math:`n`-vertex trees :math:`T` and :math:`T^{\prime}`. We aim to prove that if an edge :math:`uv` in :math:`T` is disconnected, we can add an edge :math:`u^{\prime}v^{\prime}` from :math:`T^{\prime}` to :math:`T` such that the structure remains connected.

After removing :math:`uv` from :math:`T`, the tree splits into two connected components. Let us color one component blue and the other red. In the tree :math:`T^{\prime}`, there exists a path between :math:`u` and :math:`v`. Along this path, there must be an edge where one endpoint is in the blue component and the other is in the red component (why?). If this edge is :math:`u^{\prime}v^{\prime}`, we can add it to :math:`T` to restore connectivity!

.. Tree Partitioning into Paths
.. --------------------------------

.. Consider a tree :math:`T`. In this section, our goal is to partition the edges of this tree into the minimum number of paths. For better intuition, imagine removing the edges of the paths one by one from the tree until we obtain an edgeless graph.

.. First, note that after removing each path, only the parity of the degrees at the two endpoints of the path changes. Ultimately, all vertex degrees will be even (zero). Therefore, a vertex with odd degree must be selected as an endpoint an odd number of times, and a vertex with even degree must be selected as an endpoint an even number of times. Hence, if the number of odd-degree vertices in the tree is :math:`X`, we need at least :math:`\frac{X}{2}` paths. (We know that the number of odd-degree vertices in any graph is even, so :math:`X` is even).

.. Now, if at each step we remove a path between two odd-degree vertices, we can achieve the optimal state! We only need to ensure that the two odd-degree vertices belong to the same connected component.

.. The question that arises is: How did the tree property aid us in this process?

.. Ultimately, we used the fact that if a tree has no odd-degree vertices, it has no edges (though this theorem does not hold for general graphs). This is because if a graph has at least two vertices, it will have a leaf with degree 1 (which is odd).

Covering Tree Edges with Paths
-------------------------------

In this section, we aim to find the minimum number of paths whose union covers all edges of :math:`T`. This problem is similar to the previous case with the difference that in the previous case, we partitioned edges into paths (i.e., each edge belonged to exactly one path). Here, we have the freedom to allow a path to cover an edge multiple times. It can be concluded that the solution to this problem will be smaller than the previous one.

At first glance, one realizes that since extending paths does not harm our goal, there exists an optimal solution where both ends of every path are leaves!

On the other hand, consider the edge connecting each leaf to its adjacent vertex. Each path can cover at most 2 of these edges. Thus, if there are :math:`X` leaves, we need at least :math:`\frac{X}{2}` paths. Now, we try to achieve this bound. That is, if :math:`X` is even, we cover the tree edges with :math:`\frac{X}{2}` paths, and if :math:`X` is odd, with :math:`\frac{X+1}{2}` paths.

Hence, we try to iteratively transform the tree after selecting each path into a tree with two fewer leaves (except in the last step when :math:`X` is odd). If this is possible, the number of selected paths will be half the number of leaves, as desired.

Take two arbitrary leaves :math:`u, v` and consider the tree "hung" from the path between them. First, select this path (which covers the edges between :math:`u` and :math:`v`). Suppose the vertices of this path are :math:`a_1, ..., a_k`. We now construct a new tree where instead of :math:`a_1, ..., a_k`, we have a single vertex! An edge exists between this vertex and a vertex :math:`w` if and only if there was an edge between :math:`w` and any of :math:`a_1, ..., a_k` (intuitively, this is like compressing all vertices of the path into a single vertex). Now, every path in the new graph corresponds to a path in the original graph, and we only need to cover all edges of the new tree with paths!

.. figure:: /_static/dot/Tree_to_Path_1.svg
 :width: 50%
 :align: center
 :alt: درخت اولیه

.. figure:: /_static/dot/Tree_to_Path_2.svg
 :width: 50%
 :align: center
 :alt: درخت پس از فشرده کردن یک یال

Thus, in each step, we compress a path connecting two leaves into a single vertex. In each step, the number of leaves in the new graph decreases by two, unless the newly added vertex (the compressed vertex) becomes a leaf. This happens if all vertices on the path between :math:`u` and :math:`v` have degree 2 except one, which must have degree 3. Such a pair :math:`u, v` is called an **incompatible pair**.

Therefore, if we can select two leaves :math:`u, v` in each step that do not form an incompatible pair, we proceed (reducing the number of leaves by two after compression). What if we cannot? In this case, we claim that the tree has exactly one vertex of degree 3 and all other vertices have degree 1 or 2 (why?). As shown in the figure, such a tree will have exactly 3 leaves and can be covered with 2 paths.

.. figure:: /_static/dot/Tree_to_Path_3.svg
 :width: 50%
 :align: center
 :alt: درخت نهایی

.. _tree-embedding:

Tree Embedding
---------------

Suppose we have a tree :math:`T` with :math:`n` vertices. We also have a graph :math:`G` such that :math:`\delta(G) \geq n-1`. We aim to prove that there exists a subset of edges in :math:`G` that forms :math:`T` (intuitively, that :math:`T` can be embedded as a subgraph in :math:`G`).

Consider an arbitrary leaf :math:`u` (whose only neighbor is :math:`v`) and remove :math:`u` from the tree! Then, by induction, embed the smaller tree :math:`T-u` into :math:`G`. Now, we want to add the edge :math:`uv` back to our tree. Suppose vertex :math:`v` in the original tree corresponds to vertex :math:`v^{\prime}` in graph :math:`G`. It suffices to select a neighbor of :math:`v^{\prime}` in :math:`G` that has not yet been mapped to any vertex in the embedded tree. This neighbor can then be assigned to :math:`u`, completing the inductive step.

To find such a vertex, we use the assumption :math:`\delta(G) \geq n-1`. Since :math:`v^{\prime}` has at least :math:`n-1` neighbors and at most :math:`n-2` of them are already mapped to vertices in the embedded tree, at least one neighbor of :math:`v^{\prime}` remains unmapped. We can assign :math:`u` to this neighbor, thereby satisfying the inductive hypothesis.

This problem illustrates the inductive structure of trees. Observe how removing a leaf allows us to apply the inductive hypothesis to the remaining tree, then extend the embedding by reattaching the leaf.

