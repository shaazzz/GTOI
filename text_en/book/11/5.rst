.. _tree_hash:

Tree Hash
============

In this section, we examine the problem of checking the equality of two trees. Suppose we are given two trees :math:`T_1` and :math:`T_2`, and we want to provide a linear-time algorithm to check whether :math:`T_1` and :math:`T_2` are equal. Here, "equality" means that if we ignore vertex labels, the two trees can be drawn such that their shapes are completely identical.

.. _conversion-to-equality-of-two-rooted-trees:

Conversion to Equality of Two Rooted Trees
------------------------------------------

Assume we know that vertex :math:`u_1` from tree :math:`T_1` must correspond to vertex :math:`u_2` from tree :math:`T_2`. Then we can check the equality of two rooted trees, which appears simpler than the current problem.

Thus, if we can solve the equality problem for two rooted *n*-node trees in :math:`O(f(n))`, we will have a solution that solves the current problem in :math:`O(n \times f(n))`. It suffices to fix :math:`u_1` as a constant vertex and enumerate over possible :math:`u_2`.

The key idea here is to select :math:`u_1` and :math:`u_2` with a specific property such that the number of nodes with this property is small. For example, if we consider :math:`u_1` to be a leaf, then :math:`u_2` must also be a leaf. Instead of enumerating over all :math:`n` possibilities for :math:`u_2`, it suffices to enumerate over the leaves of :math:`T_2`.

In previous sections, we learned that every tree has at most **2 centroids**. Therefore, if we choose the desired property to be "being a centroid", it suffices to fix :math:`u_1` as one of the centroids of tree :math:`T_1` and enumerate over all centroids of tree :math:`T_2` (of which there are at most 2). This reduces the problem to :math:`O(f(n))` complexity.

.. code-block:: python
   :linenos:
   
   def is_equal(t1, t2):
       # Check equality of two rooted trees t1 and t2
       if len(t1.children) != len(t2.children):  # Agar tedad farzandan motafavet bashad
           return False
       
       # Morattab sazi farzandan bar asas reshte parantezi
       c1 = sorted(t1.children, key=lambda x: x.bracket_string)  
       c2 = sorted(t2.children, key=lambda x: x.bracket_string)
       
       for i in range(len(c1)):
           if not is_equal(c1[i], c2[i]):  # Barresi bazgashti barabari
               return False
       return True

Solving the Problem of Rooted Tree Equality
-------------------------------------------

Let :math:`r_1` be the root of tree :math:`T_1` and :math:`r_2` be the root of tree :math:`T_2`. We want to determine if these two trees are equal. First, if the number of children of :math:`r_1` and :math:`r_2` differ, the trees are clearly unequal. If they have the same number of children, we need to determine which child of :math:`r_1` corresponds to which child of :math:`r_2`. Once this mapping is established, we can solve the problem recursively by verifying the equality of each child subtree of :math:`r_1` with its corresponding subtree in :math:`T_2`.

In other words, we need to permute the sequence of children of :math:`r_1` and :math:`r_2` in some way, then verify the equality of the :math:`i`-th child subtree of :math:`r_1` with that of :math:`r_2`.

The key idea is to sort the children of each node based on a specific characteristic. This eliminates the need to check all permutations of children - we simply compare them in this canonical order.

We assign a parenthesis sequence to each rooted tree :math:`T` with root :math:`r`. First, we recursively compute the parenthesis sequences for each child subtree of :math:`r`. Then, we sort :math:`r`'s children based on the lexicographical order of their corresponding strings. **This establishes the fixed ordering we wanted to assign to the children of each node.** Finally, the parenthesis sequence of :math:`T` is formed as :math:`S = (S_1S_2...S_k)`, where :math:`S_i` is the parenthesis sequence of the :math:`i`-th child subtree of :math:`r`.

It can be shown that two rooted trees are equal if and only if their corresponding parenthesis sequences are identical.

.. figure:: /_static/dot/Hash_Tree.svg
   :width: 30%
   :align: center
   :alt: If the internet connection is poor, this placeholder appears

.. code-block:: python

    MOD = 10**18 + 3
    P = 10**9 + 7
    
    def dfs(u, par):
        h = []
        # find children
        for v in adj[u]:
            if v != par:
                h.append(dfs(v, u))
        # sort hashes and calculate parent's hash
        h.sort()
        res = 1
        for i in range(len(h)):
            res += h[i] * pow(P, i + 1, MOD)
            res %= MOD
        return res

Rooted Tree Hash Calculation
-----------------------------

Since working with strings (concatenating two strings or checking equality of two strings) requires :math:`O(n)` operations, this makes us think of assigning each vertex a number representing a string instead of directly working with strings!

Using the above logic, we calculate the number for each vertex as follows: First, we obtain the numbers for the children, then sort them. Assuming they are :math:`H_1,...,H_k`, our number will be :math:`H = 1 + \sum H_i \times P^i` modulo :math:`M`, where :math:`M` and :math:`P` are two random prime numbers. This technique is called hashing. Since :math:`M` and :math:`P` are random numbers, we can assume the resulting numbers are random, and the probability of assigning the same number to two different trees will be extremely low. (To be more confident, we can use more :math:`M` and :math:`P` pairs to make the failure probability increasingly smaller).

The implementation of the algorithm we described is as follows:

.. code-block:: cpp

  const int maxn = 1e5 + 10, P = 101, M = 1e9 + 9;
  
  vector <int> v[maxn];
  
  int calc(int u, int par = -1){
      vector<int> vec;
      for(int y : v[u]){
  	      if(y != par)
  	      vec.push_back(calc(y, u));
      }
      sort(vec.begin(), vec.end());
      int H = 0;
      for(int x : vec)
	    H = (1ll * H * P + x) % M;
      H = (1 + H) % M;
      return H;
  }
  
  int main(){
      int n;
      cin >> n;
      for(int i = 0; i < n - 1; i++){
	  int a, b;
	  cin >> a >> b;
	  v[a].push_back(b);
	  v[b].push_back(a);
      }
      cout << calc(1) << "\n"; // hash derakht rishe dar az 1
      return 0;
  }

