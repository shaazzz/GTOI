.. _graphs_and_magic:

Graphs and Magic
=======================

Sometimes combinatorial problems with very interesting ideas are modeled as graphs. In the realm of graphs, using the powerful tools at our disposal (theorems and good intuition about graphs), we can easily solve problems.

In this section, we aim to familiarize you with the magic of graph modeling through a few examples!

Tree?
------------

Let set :math:`S` be defined as the numbers 1 to :math:`n`, and consider :math:`n` distinct subsets :math:`A_1, A_2, \ldots, A_n` of :math:`S`. Prove that there exists a number :math:`x` such that if :math:`x` is removed from all :math:`A_i` subsets, the subsets remain pairwise distinct.

Answer
~~~~~~~~~~

When does removing an element like :math:`x` from sets result in two equal sets? Only when there exist two sets like :math:`A_i, A_j` that differ solely in :math:`x`. That is, all elements except :math:`x` must either be present in both sets or absent from both.

Now, let's model this problem as a graph. Consider :math:`n` vertices, each representing a set :math:`A_i`. Draw an edge between two vertices :math:`u, v` with weight :math:`w` if the only difference between :math:`A_u` and :math:`A_v` is the element :math:`w`. The problem now reduces to proving there exists a weight not present among the edges!

According to our graph model, traversing an edge with weight :math:`w` toggles the membership of element :math:`w` in our current set. Therefore, in any closed walk, we must have an even number of each weight (since the presence/absence status of each element must toggle an even number of times to return to the original set).

Assume for contradiction that every weight appears in at least one edge. Select one arbitrary edge for each weight to form a graph :math:`G` with :math:`n` edges.

First, observe that :math:`G` cannot contain cycles. If a cycle existed, it would require an even number of each weight, which is impossible since we have exactly one edge per weight. Thus, :math:`G` must be a forest. However, :math:`G` has exactly :math:`n` edges, which is impossible (as a forest's maximum edge count corresponds to a tree with :math:`n-1` edges).

From this contradiction, we conclude there must exist a weight not present among the edges, proving our claim.

Triangles?
--------------

Assume that :math:`S` is a set with :math:`2^n+1` elements, and :math:`f(\{x,y\})` is a function that takes a two-element subset of :math:`S` as input and returns a number between 0 and :math:`2^{n-1}-1`. Furthermore, we know that for any three distinct elements :math:`x, y, z` in :math:`S`, one of :math:`f(\{x,y\})`, :math:`f(\{x,z\})`, or :math:`f(\{y,z\})` equals the sum of the other two. You must prove that there exist :math:`x, y, z` such that :math:`f(\{x,y\})`, :math:`f(\{x,z\})`, and :math:`f(\{y,z\})` are all equal to 0.

