.. Floyd-Warshall algorithm
.. ------------------------

Floyd-Warshall
==============

.. code-block:: python
   :linenos:

   def floyd_warshall(n, edges):  # Floyd-Warshall algorithm
       dist = [[float('inf')] * n for _ in range(n)]  # Initialize matrix
       for i in range(n):
           dist[i][i] = 0  # Distance to self is zero
       for u, v, w in edges:
           dist[u][v] = w  # Assign edge weights
       
       for k in range(n):
           for i in range(n):
               for j in range(n):
                   dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])  # Relaxation step
       return dist

.. figure:: images/fig11.png

The Floyd-Warshall algorithm finds the shortest paths between all pairs of vertices in a **weighted directed graph**. This algorithm works even with graphs containing **negative weight edges**, provided there are no negative cycles. Its main idea is to gradually improve the shortest path estimates between all pairs through intermediate vertices.

The time complexity of the algorithm is :math:`O(n^3)` and its space complexity is :math:`O(n^2)`, making it suitable for dense graphs where the number of vertices *n* is relatively small. By modifying the condition in the relaxation step to ``dist[i][k] and dist[k][j]`` instead of summing, the algorithm can also be used to determine **reachability** between all pairs of vertices (transitive closure).

Problem Statement
------------------

We have a directed weighted graph 
:math:`G`
. The weights of the edges in :math:`G` can also be negative. We know that graph :math:`G` contains no cycles with negative total weight.

In this problem, for every pair of vertices :math:`(u, v)`, we want the length of the shortest path from :math:`u` to :math:`v`. The length of a path is equal to the sum of its edge weights.

Floyd-Warshall Algorithm
------------------------

To solve this problem, we first define a :math:`dp` with dimensions 
:math:`|V(G)|.|V(G)|.|V(G)|` 
where 
:math:`dp_{k, i, j}` 
equals the length of the shortest walk from vertex :math:`i` to vertex :math:`j`, where the intermediate vertices (vertices in the path except :math:`i` and :math:`j` themselves) are chosen from the set 
:math:`\lbrace 1, 2, \dots, k \rbrace`.

We know that the length of the shortest walk between two vertices in graph :math:`G` is equal to the length of the shortest path. This is because if the shortest walk contains a repeated vertex, it implies the existence of a cycle with positive length (according to the problem's assumption, cycles cannot have negative lengths). This cycle can be removed to obtain a shorter walk, leading to a contradiction.

For the base cases of this dp, we know that :math:`dp_{0, i, i} = 0`. For any pair of vertices :math:`(u, v)`, we set :math:`dp_{0, u, v}` equal to the weight of the shortest edge from :math:`u` to :math:`v` (if no edge exists between :math:`u` and :math:`v`, then :math:`dp_{0, u, sc} = \infty`).

To compute :math:`dp_{k, i, j}`, we consider two cases:  
1. Vertex :math:`k` is **not** in the optimal path. In this case, the answer is :math:`dp_{k - 1, i, j}`.  
2. Vertex :math:`k` **is** in the path. Here, the optimal path length is :math:`dp_{k - 1, i, k} + dp_{k - 1, k, j}`, since we first travel from :math:`i` to :math:`k` and then from :math:`k` to :math:`j`. In both subpaths, the intermediate vertices are guaranteed to have indices less than :math:`k`.

The length of the shortest path from vertex :math:`u` to vertex :math:`v` is given by the value of :math:`dp_{n, u, v}`.

Order Analysis
--------------

For updating each DP cell, we perform :math:`\mathcal{O}(1)` operations. We know the DP has a complexity of :math:`\mathcal{O}\left(\left|V\left(G\right)\right|^{3}\right)`. Thus, in total, we perform :math:`\mathcal{O}\left(\left|V\left(G\right)\right|^{3}\right)` operations. The memory order used is also :math:`\mathcal{O}\left(\left|V\left(G\right)\right|^{3}\right)`.

.. rst::
Memory Order Optimization
-------------------------

To optimize the memory consumption, we can remove the first dimension. As a result, the memory order complexity becomes 
:math:`\mathcal{O}\left(\left|V\left(G\right)\right|^{2}\right)`.

The idea is to create a 
:math:`for` 
loop from 1 to 
:math:`\left|V\left(G\right)\right|` 
and name its variable :math:`k`. Then, in each iteration, update every cell of the :math:`dp` array. By "updating", we mean branching based on whether vertex :math:`k` is part of the intermediate vertices in the path, similar to the standard approach.

To prove correctness, we assert that after each iteration of the first loop, all values remain valid. Initially, we note that any :math:`dp` cell with one of its dimensions equal to :math:`k` will never change. When updating other :math:`dp` cells, we use values from cells that necessarily have :math:`k` as one of their dimensions.

Thus, by induction, we can prove that after the :math:`k`-th iteration, 
:math:`dp_{i, j} = dp^{\prime}_{k, i, j}` 
where 
:math:`dp^{\prime}` 
is the non-optimized version of the DP array. After the :math:`n`-th iteration, we will obtain the desired values.

By induction, it can be proven that after the :math:`k`-th iteration, 
:math:`dp_{i, j} = dp^{\prime}_{k, i, j}` 
where 
:math:`dp^{\prime}` 
is the non-optimized DP array. Hence, after the :math:`n`-th iteration, we will achieve the target values.

Negative Cycle
--------------

You may wonder, if it is not guaranteed whether the graph has a negative cycle or not, how can we determine if a negative cycle exists? For this purpose, we first set 
:math:`dp_{i, i} = 0`. 
If during the execution of the algorithm, any entry 
:math:`dp_{i, i} < 0` 
becomes true, then we know there exists a closed walk of negative length from :math:`i` to :math:`i`, and we know that every closed walk with negative length contains a cycle of negative length.

If a negative cycle exists, then for some vertex :math:`u` in that negative cycle, it must satisfy 
:math:`dp_{u, u} < 0`. 
This is because, according to the definition of :math:`dp`, the negative cycle will correctly propagate its effect to 
:math:`dp_{u, u}` 
and make it negative.

Based on the above two arguments, the existence of a negative cycle is equivalent to having 
:math:`dp_{i, i} < 0`. 
Thus, it is sufficient to check whether any 
:math:`dp_{i, i}` 
becomes negative during the process.

