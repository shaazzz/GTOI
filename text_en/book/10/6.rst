درخت مجازی
===============

یک درخت مثل :math:`T`‍
را در نظر بگیرید. یک زیر مجموعه دلخواه از راس های 
:math:`T`
مثل
:math:`A`
نسبت را درخت مجازی گوییم اگر نسبت به 
:math:`lca`
بسته باشد. یعنی
:math:`lca`
هر دو راس دلخواه از
:math:`A`
درون خود
:math:`A`
باشد.


.. figure:: /_static/virt_tree_intro.png
   :width: 80%
   :align: center
   :alt: اگه اینترنت یارو آشغال باشه این میاد


چرا درخت مجازی برای ما مهم است؟
---------------------------------

اولین مسئله
~~~~~~~~~~~~~~

فرض کنید زیرمجموعه ای از راس های درخت مثل
:math:`B`
را سیاه کرده ایم. حالا می خواهیم تعدادی از راس هایی که سیاه نیستند را نیز سیاه کنیم به طوریکه کل راس های سیاه همبند باشند. 
همچنین می خواهیم تعداد راس های سیاه در نهایت کمینه شوند. این کمینه تعداد را بیابید.

واضح است که برای حل این سوال باید تمام راس هایی که بر روی مسیر حداقل دو راس سیاه هستند را سیاه کنیم. اما سوال مهم این است که چطور تعداد این راس ها را بیابیم
به طوریکه پیچیدگی زمانی ما به
:math:`|B|`
مربوط باشد و کاملا مستقل از
:math:`n`
باشد. (یعنی اگر مجموعه‌ای که به ما دادند کوچک بود ما هم سریع جواب بدهیم و برعکس)

فرض کنید عدد جواب
:math:`ans`
باشد. توجه کنید که خود 
:math:`ans`
ممکن است خیلی زیاد باشد و از مرتبه
:math:`|B|`
نباشد. مثلا اگر درخت ما یک مسیر باشد و
:math:`B`
مجموعه دو راس ابتدا و انتهای این مسیر باشد
:math:`ans=n`
می شود. پس نمی توانیم از مرتبه زمانی
:math:`ans` 
هم کار کنیم.

حالا به این نکته جالب توجه کنید. حالت نهایی درخت را (که در آن راس های سیاه همبند هستند) را در نظر بگیرید و فرض کنید
درجه سیاهی هر راس مثل
:math:`u`
را تعداد راس های سیاه مجاور راس سیاه
:math:`u`
تعریف می کنیم. همانطور که احتمالا از مثالی که برای مسیر زدیم متوجه شدید، ممکن است تعداد زیادی از راس هایی که مجبور به سیاه کردنشان هستیم درجه سیاهی ۲
داشته باشند!

یک معادل سازی روی مسئله انجام می دهیم تا کارمان راحت تر شود. درخت را از یکی از راس های
:math:`B`
آویزان کنید. حالا به ازای هر راس
:math:`u`
درون
:math:`B`
تمام راس های از
:math:`u`
تا ریشه باید سیاه شوند و همچنین این سیاه بودن کافی نیز هست (یعنی ساختار به دست آمده شرط همبند بودن را دارد).

در اینجا هست که مسئله ما کمی شبیه مسئله درخت مجازی می شود.فرض کنید آنقدر به مجموعه 
:math:`B`
راس اضافه کردیم که نسبت به
:math:`lca`
بسته شد. یعنی تا زمانی که دو راس 
:math:`u, v`
درون 
:math:`B`
بودند که
:math:`lca(u, v)`
درون
:math:`B`
نبود ما باید 
:math:`lca(u, v)`
را سیاه کنیم و به
:math:`B`
اضافه کنیم.

حالا به ازای هر راس غیر از ریشه مثل 
:math:`u`
پایین ترین جد سیاهش را پدر مجازی این راس بنامید که آن را با
:math:`p_u`
نشان می دهیم. توجه کنید که حالا راس های بین
:math:`u, p_u`
همان راس هایی بودند که گفتیم درجه سیاهی آنها ۲ می شود و ممکن است تعداد آنها زیاد باشد. حالا اگر به ازای تمام
:math:`u, p_u`
هااین راس ها را بشماریم (که تعداد آن ها 
:math:`h_u - h_{p_u} - 1` 
است) و این مقدار را با تعداد راس های سیاه فعلی جمع کنیم جواب مسئله به دست خواهد آمد.

در این قسمت به چند نکته کلیدی اشاره نکردیم. از جمله اینکه:

- چطور می توانیم راس هایی را پیدا کنیم که اگر به مجموعه :math:`B` اضافه شوند درخت مجازی می سازند؟

- چرا تعداد حداکثر تعداد راس های درخت مجازی تنها به :math:`B` مربوط است و ربطی به :math:`n` ندارد؟

در ادامه به این سوال ها جواب می دهیم. همچنین لازم به ذکر است که سوالی که در این قسمت مطرح کردیم بدون عوض کردن ریشه هم به همان راحتی قایل حل است.
عوض کردن ریشه ای که انجام دادیم صرفا به دلیل راحت تر کردن توضیحات بود!

قطر یک زیرمجموعه
~~~~~~~~~~~~~~~~~~~~

فرض کنید یک درخت 
:math:`T`
و یک مجموعه 
:math:`B`
به شما داده اند. حالا شما باید دو تا از راس های درون 
:math:`B`
را نام ببرید که فاصله آن دو از یکدیگر بیشینه است.

الگوریتم پیدا کردن قطر درخت با 
dfs 
را در فصل ۲ بررسی کردیم. در اینجا هم اگر راس های 
:math:`B`
همبند باشند می توانیم از همان الگوریتم 
dfs 
استفاده کنیم.
اگر همبند نبود چطور؟ دغدغه فعلی ما مشابه مسئله قبلی است. یعنی می خواهیم به ازای هر دو راس 
:math:`u,v` 
از 
:math:`B`
تمام راس های حاظر در مسیر
:math:`uv`
را به 
:math:`B`
اضافه کنیم و سپس روی گراف حاصل الگوریتم 
dfs 
را اجرا کنیم.

اما در حقیقت این کار روش خوبی نیست چون همانطور که در مسئله قبل بیان کردیم ممکن است تعداد راس هایی که نیاز داریم به 
:math:`B`
خیلی زیاد باشد.

در اینجا هم مثل مسئله قبل از درخت مجازی استفاده می کنیم. یعنی مجموعه 
:math:`B`
را آنقدر بسط می دهیم تا به یک درخت مجازی برسیم.
حالا بین در یک گراف جدید بین هر راس و پدر مجازی خودش یالی با وزن  
:math:`h_u - h_{p_u}` 
می کشیم.
حالا درخت جدیدی که داریم همان درخت مجازی ما
است! با پیدا کردن قطر در این درخت، بیشینه فاصله بین راس های
:math:`B`
اولیه را پیدا می کنیم.


الگوریتم
---------------

مقدمه
~~~~~~~~~~~

همانطور که احتمالا از مسائل قبلی شهود
گرفتید، درخت مجازی می تواند نماینده یک زیردرخت کوچک از درخت ما باشد.
نکته جالب توجه این است که این زیردرخت لزوما همبند نیست اما اگر درخت جدیدی بسازیم که
در آن هر کس به پدر مجازی اش وصل شده باشد درخت جدیدی به دست می آوریم.
سپس می توانیم از این به
بعد تنها درخت جدید را در نظر بگیریم و محاسبات خود را روی آن انجام دهیم.


.. figure:: /_static/transform_to_virt_tree.png
   :width: 80%
   :align: center
   :alt: اگه اینترنت یارو آشغال باشه این میاد


در این قسمت فرض می کنیم که مجموعه راس های
:math:`B`
به ما داده شده است و ما می خواهیم تعدادی راس به آن اضافه کنیم تا
:math:`B`
یک درخت مجازی شود. در اینجا این کار را بسط دادن می نامیم.

اولین تلاش
~~~~~~~~~~~~

در گام اول می توانیم به ازای هر دو راس درون مجموعه 
:math:`B`
مثل
:math:`a, b`
،
:math:`lca(a, b)`
را محاسبه کرده و آن را مجموعه 
:math:`C`
بنامیم.

حالا ادعا می کنیم  
:math:`D = B \cup C`
یک درخت مجازی است. برای اثبات توجه کنید که هر راس عضو 
:math:`D`
درون زیردرختش یک عضو از 
:math:`B`
موجود است. (چرا؟) حالا فرض کنید که دو راس 
:math:`a, b \in D` 
باشند که 
:math:`lca`
آن دو درون 
:math:`D` 
نباشد.
راس های عضو 
:math:`B`
که درون زیردرخت
:math:`a, b`
بودند را به ترتیب 
:math:`a\prime, a\prime`
بنامید. 
اگر
:math:`lca(a, b)`
در
:math:`D`
نیامده باشد آنگاه 
:math:`lca(a\prime, b\prime)`
همان 
:math:`lca(a, b)`
خواهد بود که در 
:math:`C`
است که با حرف اولیه ما تناقض دارد.

پس تنها کافیست به ازای هر دو راس درون 
:math:`B`
این محاسبات را انجام دهیم (و نیازی نیست که
:math:`lca`
راس هایی که جدید اضافه می شوند را با بقیه بررسی کنیم)

یک الگوریتم بهتر
~~~~~~~~~~~~~~~~~~

روشی که قبل از این گفتیم پیچیدگی زمانی بالایی داشت. اگر محسبات مربوط به
:math:`lca`
را
:math:`O(lg(n))`
در نظر بگیریم آنگاه روش بالا از 
:math:`O(|B|^2)`
خواهد بود.

حالا تلاش می کنیم که یک روش بهتر پیدا کنیم. یک راس به نام 
:math:`u`
را در نظر بگیرید که در 
:math:`B` 
نیست اما باید در درخت مجازی باشد. یعنی دو راس 
:math:`u`
دو بچه 
:math:`a, b`
دارد که درون زبردرخت هر یک از 
:math:`a, b`
یک یا چند راس از 
:math:`B`
وجود دارد (که
:math:`lca`
آن ها 
:math:`u`
خواهد شد)

حالا توجه کنید که از 
:math:`lca`
گرفتن هر کدام از راس های درون زیردرخت
:math:`a`
با هر کدام از راس های درون زیردرخت
:math:`b`
راس 
:math:`u`
به دست خواهد آمد. مشکل الگوریتم قبلی این بود که در این شرایط 
:math:`u`
را تعداد زیادی بار حساب می کرد که به این نیازی نداشتیم. یعنی به ازای هر زوج مرتب از راس های زیردرخت 
:math:`a, b`
یک بار راس 
:math:`u`
را حساب می کرد که دقیقا همین موضوع پیچیدگی زمانی راه قبل را زیاد می کرد.

نکته جالب این است که اگر بتوانیم برای راس های درخت 
:math:`T`
ترتیب اولیه ای قائل شویم که در این ترتیب **زیردرخت هر راس به یک بازه تبدیل شود** آنگاه می توانیم از روش زیراستفاده کنیم و ادعا کنیم به درستی عمل می کند.

- راس های :math:`B` را بر حسب این ترتیب گفته شده مرتب کنید.
- حالا به ازای هر دو راس متوالی در لیست مرتب شده ای که به دست آوردیم :math:`lca` این دو راس را به مجموعه :math:`C` اضافه کنید.
- اجتماع دو مجموعه 
  :math:`B, C`
  درخت مجازی ما را تشکیل می دهند.


چرا این الگوریتم درست کار می کند؟ گفتیم راس 
:math:`u`
دو بچه دارد که در زیردرخت هر کدام راسی از 
:math:`B`
وجود دارد. در لیستی مرتب شده ای که الگوریتم را روی آن انجام دادیم **یک بازه** مربوط به زیر درخت 
:math:`u` 
وجود دارد. در راس های مربوط به این بازه قطعا دو راس وجود داند که مربوط به زیردرخت بچه های متفاوتی از
:math:`u`
هستند (چرا؟) بنابراین هنگامی که 
:math:`lca`
حساب می کنیم راس
:math:`u`
به مجموعه 
:math:`C`
اضافه می شود! همانطور که می خواستیم.

ترتیب بهینه؟
~~~~~~~~~~~~~~~~~

در الگوریتم بالا به طور جادویی از یک ترتیب استفاده کردیم که ویژگی جالبی داشت. اما چنین ترتیبی ارائه ندادیم.

می توانید خودتان چنین ترتیبی بسازید. تمام روش های ساختن چنین ترتیبی ریشه در الگوریتم 
dfs 
دارند. چرا؟ چون هنگامی که می خواهیم این ترتیب را برای زیردرخت راسی مثل 
:math:`u`
محاسبه کنیم باید ابتدا به صورت بازگشتی چنین ترتیبی برای زیردرخت تمام بچه های 
:math:`u`
پیدا کنیم و راس
:math:`u` 
را هم جایی بین فاصله بازه های دو تا از بچه ها (یا قبل و بعد از همه) اضافه کنیم.

این دقیقا کاری است که 
در 
dfs
آن را
starting-time
یا 
finishing-time
می نامیم و آن را در فصل ۲ بررسی کردیم.

پیاده سازی
~~~~~~~~~~~~~~~~

.. code-block:: cpp
  
  const int maxn = 1e5 + 10, max_log = 20;

  int start_time[maxn], sparse_table[maxn][max_log], h[maxn];
  vector<int> g[maxn];
  int Counter = 0;

  void dfs(int v, int par = 0){
    h[v] = h[par] + 1;
    sparse_table[v][0] = par;
    for(int i = 1; i < max_log; i++){
        sparse_table[v][i] = sparse_table[sparse_table[v][i-1]][i-1];
    }
    start_time[v] = Counter;
    Counter = Counter + 1;
    for(int u : g[v]){
        if(par != u){
            dfs(u, v);
        }
    }
  }

  int lca(int a, int b){
    if(h[a] < h[b])
        swap(a, b);
    for(int i = max_log-1; i >= 0; i--){
        if(h[sparse_table[a][i]] >= h[b])
            a = sparse_table[a][i];
    }
    if(a == b)
        return a;
    for(int i = max_log-1; i >= 0; i--){
        if(sparse_table[a][i] != sparse_table[b][i])
            a = sparse_table[a][i], b = sparse_table[b][i];
    }
    return sparse_table[a][0];
  }
  
  vector<int> build_virtual_tree(vector<int> vec){
    sort(vec.begin(), vec.end(), [](int a, int b){ return start_time[a] < start_time[b]; }); // sort on starting time
    for(int i = vec.size()-1; i > 0; i--){
        vec.push_back(lca(vec[i], vec[i-1]));
    }
    sort(vec.begin(), vec.end(), [](int a, int b){ return start_time[a] < start_time[b]; });
    vec.resize(unique(vec.begin(), vec.end())-vec.begin());
    return vec;
  }



همچنین توجه کنید که اگر راس 
:math:`u`
درون درخت مجازی باشد و راس قبل از آن در ترتیب
starting-time
راس 
:math:`v`
باشد در اینصورت پدر مجازی راس 
:math:`u`
برابر با
:math:`lca(u, v)`
می باشد. (چرا؟)

برای محاسبه 
:math:`lca`
در کد بالا از روشی با پیچیدگی زمانی
:math:`O(lg(n))`
استفاده شد و در نهایت پیدا کردن بسط درخت مجازی مجموعه
:math:`B`
با زمان 
:math:`O(|B| \times lg(n))`
انجام شد.
