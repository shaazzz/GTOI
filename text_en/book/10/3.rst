
Tarjan's Offline Algorithm
========================

Problems in which a number of queries are posed typically have two types of solutions: online and offline. In an online approach, you are forced to answer each query immediately and cannot receive the next query until the current one is answered. However, in an offline approach, you can receive all queries first and then begin answering them.

In this section, we present an offline solution for the problems discussed. Since being online is a constraint, offline approaches generally have lower complexity.

Solution for the Ancestor at a Specific Depth Problem
-----------------------------------------------------
This problem is straightforward. It is sufficient to receive all queries and then perform a DFS from the root of the tree. When we enter a node, we push it onto a vector, and when we exit it, we pop it. In this way, when we are at a node, the node itself and all its ancestors are in the vector, ordered by depth. Therefore, upon reaching a node, we can answer all queries related to it in :math:`O(1)`. Thus, we have a linear-time solution.

Solution for the LCA Problem
----------------------------
First, we receive all queries, and for each node, we prepare a list of queries related to it. This can be done in linear time with respect to the input.

Then, we perform a DFS on the tree. When we reach a node, we create a set and place this node into it. And when we exit this node, we combine the set containing this node with the set of its parent. In this way, if we are at a node `u`, any other node `v` will belong to a set whose representative is the lowest common ancestor (LCA) of `u` and `v`. Union operations can be performed using DSU, and thus the complexity of this algorithm is: :math:`O((n+q)*a(n))`, where :math:`a(n)` is the inverse Ackermann function.