::
How to Use This Book?
=====================
This book is designed for preparation for the Computer Olympiad, but
all enthusiasts can use it.

The book includes graph theory topics relevant to the Computer Olympiad, such as definitions and theoretical concepts, algorithms,
and data structures. Along with each algorithm or data structure, its code in
C++
is also provided. Given that in the final stages of the Computer Olympiad you will need
to know and use this language, it is highly recommended that you have
a brief familiarity with C++ before starting
to study this book, so that you can both
use the code examples in the book and
solve the programming problems provided as
links in the book.

The book's progression is structured from introductory to advanced, and later topics
may require knowledge of previous ones. Therefore, it is recommended to read the book in order,
and it's good to at least skim through the lessons even if you already know a topic, to ensure no sub-topic
is missed.

Problems
-------

Problems hold double the importance compared to the lessons. Solving problems develops your mind
and leads to greater mastery. Problem-solving skill is what is demanded of you in the Olympiad
and will also help you in life. Look at problems like a puzzle and enjoy solving them.

Wherever in this book you are asked to prove, demonstrate, determine
or calculate something, you must provide a mathematical proof. In some problems, you might have a good intuition
that the statement should hold or you can guess the answer with small examples, but
this is not enough, and you must provide a reason for every proposition you make.

Some problems have a small symbol next to them. These symbols have special meanings. A minus sign (-) means
warm-up, an exclamation mark (!) means an instructive question, and a plus sign (+) means a challenging question
and sometimes requires more knowledge.

Troubleshooting
----------

It is natural that you may not understand some topics. These topics are
taught as university courses, and it might be difficult for you as a student
to learn them from a book. These topics are well-known, and there are many writings and videos on the internet
for learning them. You can also ask your friends your questions. Online forums
are good places for this. For example, the Shaaz Group is an online group
where you can ask questions, and people your age will answer them.

Graph definitions are numerous, and you might forget them. The goal of this book in teaching
graphs is by no means to memorize definitions. Whenever you forget a definition, you can
review them from the lessons or from
`this page </book/appendix/3>`_.
If there is a definition in the book that is not on this page, please
report it.

Contribution and Issue Reporting
----------------------
This book is a public book, and anyone can freely download it from the internet,
print it, or use its content in any way, provided the license conditions are met (referencing contributors
and sharing the resulting product under the same conditions, i.e., freely for public use). Therefore, contributing to this book helps the community. From
the smallest contribution, such as reporting a typo, to large contributions, such as writing
incomplete lessons, all are beneficial.

The book's source is located in
`this GitHub repository <https://github.com/shaazzz/GTOI>`_. To report issues, use
https://github.com/shaazzz/GTOI/issues
. To improve the text or add answers to questions, use the standard contribution process
in GitHub projects, which involves forking the repository and submitting a
pull request
. If you wish to complete a part of the lesson, first propose it
in the issues section to prevent duplication of effort and ensure your
or others' work is not wasted.

Prerequisites
------------

The C++ programming language, as mentioned above, and also algorithm complexity analysis, if you are reading this book for the Computer Olympiad or are interested in practical topics and graph implementation. In the next appendix,
we will examine algorithms and their time and space complexity analysis
and you will become familiar with symbols such as
:math:`O, \Omega, \theta`
which are used extensively in the book. If you are not familiar with these symbols,
be sure to read the next appendix.

Mathematical proof, conclusion, and inference tools such as proof by contradiction
are also necessary for proving problems. Knowing mathematical induction
and mastering it will also help you better understand and solve more problems.