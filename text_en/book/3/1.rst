Definitions
=============

.. image:: images/graph_example.png
   :align: center

A graph is a structure amounting to a set of vertices connected by edges. Formally:

.. code-block:: python

   class Graph:
       def __init__(self):
           self.vertices = {}  # Finglish comment (no change)
           self.edges = []     # لیست یالها (Persian comment - translate)
           
       def add_edge(self, u, v):
           # در صورت وجود رأس، یال اضافه کن (Persian comment - translate)
           if u in self.vertices and v in self.vertices:
               self.edges.append((u, v))

A **simple graph** prohibits loops and multiple edges between vertices. In contrast, a **multigraph** allows them.

.. raw:: html

    <div style="direction: ltr; text-align: left">

Definition 3.1.1 (Directed Graph)
----------------------------------
Suppose we have several cities connected by roads, and you are in city D and want to go to city A (Figure 1). To reach city A, we must traverse several roads, but since the roads can be one-way, we need a graph that shows the direction of each road, which we call a **directed graph** (Figure 2).

.. figure:: /_static/dot/Simple_Graph.svg
 :width: 50%
 :align: center
 :alt: اگه اینترنت یارو آشغال باشه این میاد

.. figure:: /_static/dot/Simple_Directed_Graph.svg
 :width: 50%
 :align: center
 :alt: اگه اینترنت یارو آشغال باشه این میاد

More precisely, a directed graph 
:math:`G` 
is an ordered pair 
:math:`(V, E)` 
where :math:`V` is the set of vertices. The set :math:`E` contains ordered pairs of the form 
:math:`(u, v)`, 
indicating a directed edge from 
:math:`u` 
to 
:math:`v` 
in the graph.

We call a directed graph 
:math:`G` 
**simple** if it contains no multiple directed edges or loops. Note that :math:`G` can be simple while :math:`E` contains both 
:math:`(u, v)` 
and 
:math:`(v, u)`, 
but it cannot have duplicate ordered pairs 
:math:`(u, v)`.

Note: From this point forward, we will work with simple directed graphs. Unless explicitly stated otherwise, the term "directed graph" will refer to a simple directed graph.

.. raw:: html

    </div>

.. Degree in Directed Graphs
.. ------------------------------------------------

درجه در گراف جهت دار
--------------------------------
در یک گراف جهت دار، هر راس یک درجه ورودی و یک درجه خروجی دارد. برای مثال در شکل۲، درجه ورودی راس D برابر با ۳ و درجه خروجی آن برابر با ۱ است!

درجه ورودی راس :math:`v` را با نماد 
:math:`d^{−}(v)`
یا
:math:`deg^{−}(v)`
و درجه خروجی را با 
:math:`d^{+}(v)`
یا
:math:`deg^{+}(v)`
نمایش می‌دهیم.

منظور از 
:math:`\delta^{+}, \delta^{-}`
به ترتیب مینیمم درجه ورودی و مینیمم درجه خروجی است.

به طور مشابه منظور از 
:math:`\Delta^{+}, \Delta^{-}`
به ترتیب ماکسیمم درجه ورودی و ماکسیمم درجه خروجی است.

Degree in Directed Graphs
--------------------------------
In a directed graph, each vertex has an in-degree and an out-degree. For example, in Figure 2, the in-degree of vertex D is 3 and its out-degree is 1!

The in-degree of vertex :math:`v` is denoted by the symbol 
:math:`d^{−}(v)` 
or 
:math:`deg^{−}(v)`, 
and the out-degree is denoted by 
:math:`d^{+}(v)` 
or 
:math:`deg^{+}(v)`.

The notation 
:math:`\delta^{+}, \delta^{-}` 
refers to the *minimum in-degree* and *minimum out-degree*, respectively.

Similarly, the notation 
:math:`\Delta^{+}, \Delta^{-}` 
refers to the *maximum in-degree* and *maximum out-degree*, respectively.

.. _directed-cycles-paths:

Cycles and Paths in Directed Graphs
-----------------------------------
Similar to simple graphs, in directed graphs, we have definitions such as walk, closed walk, trail, cycle, and path.
For example, in Figure 2, a directed path could be a path like (D -> C -> B -> A)
where the starting vertex is the origin (D) and the ending vertex is the destination (A). Note that when traversing edges, their direction must be respected. For example, when at vertex D, we cannot go directly to vertex A!


Additionally, a cycle in Figure 2 could be (D -> C -> B -> D). Obviously, when traversing a cycle, edge directions must be respected.

Similarly, the length of each of the above definitions equals the number of its edges.


More precisely:

**Walk:**
A sequence
:math:`v_{1}, v_{2}, ..., v_{l}`
is a walk in the directed graph
:math:`G`
if for every
:math:`1 \leq i < l`,
the edge
:math:`(v_{i}, v_{i+1})`
exists in :math:`G` (i.e., the edge belongs to the set :math:`E`).

**Closed Walk:**
If in the sequence we defined,
:math:`v_{1} = v_{l}`,
we call this walk a closed walk.

**Trail:** If in the sequence we defined, there are no repeated edges, we call this walk a trail.

**Path:** If in the sequence we defined, there are no repeated vertices (and consequently no repeated edges), the resulting walk is a path.

**Cycle:** Finally, if in a path, the starting and ending vertices are the same (
:math:`v_{1} = v_{l}`
),
we call the resulting walk a cycle.

Note that these definitions are exactly like those in simple graphs, with the difference that in directed graphs, edge directions must be correctly followed!

Theorems and Lemmas Used in This Section
----------------------------------------

.. _theorem-3-1-2:

**Theorem 3.1.2**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Theorem Statement:** In a directed graph :math:`G`, we have  
:math:`\sum d^{-}(v) = \sum d^{+}(v)`  

**Proof:** The proof of this theorem is simple (this theorem is similar to the evenness of the sum of degrees in a simple graph). Consider any edge in this graph: it adds one outgoing degree to the starting vertex and one incoming degree to the ending vertex. Consequently, one unit is added to the right side of the equality and one unit to the left side of the equality!

.. raw:: latex

    \setcounter{chapter}{3}
    \setcounter{section}{1}
    \setcounter{subsection}{2}

**Theorem 3.1.3**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Statement of the Theorem:** In a directed graph :math:`G`, if every vertex has an out-degree (or in-degree) of at least 1, then the graph contains at least one directed cycle.

**Proof of the Theorem:** This theorem is analogous to the case of simple graphs where every vertex has a degree of at least 2. Consider the longest path in the graph.

Suppose this longest path is 
:math:`v_1, v_2, ..., v_l`.
By definition, the length of this path is 
:math:`l-1`.

Now consider vertex 
:math:`v_l`.
Since this vertex has an out-degree of at least 1, there exists a vertex 
:math:`x`
such that there is a directed edge from 
:math:`v_l`
to 
:math:`x`.
Moreover, vertex 
:math:`x`
cannot lie outside this path (Why?).

Therefore, vertex 
:math:`x`
must be one of the vertices in the path. Let 
:math:`x = v_j`
for some :math:`j`.

Consequently, the sequence 
:math:`v_{j}, v_{j+1}, ..., v_{l}, v_{j}`
forms a directed cycle!

.. _theorem-3-1-4:

**Theorem 3.1.4**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Theorem Statement:** In a directed graph :math:`G`, if every vertex has an out-degree (or in-degree) of at least :math:`k`, then the graph contains a cycle of length at least :math:`k+1`.

**Proof:** This theorem generalizes Theorem 3.1.2. Its proof follows a similar approach to Theorem 3.1.2.

Consider the longest path in :math:`G`. Suppose the sequence of vertices is 
:math:`v_1, v_2, \ldots, v_l`.

We claim that :math:`l > k` (i.e., the length of the longest path is at least :math:`k`).

The proof of this claim is straightforward. Observe that vertex :math:`v_l` has at least :math:`k` outgoing edges. All vertices adjacent to :math:`v_l` (those receiving an edge from :math:`v_l`) must lie within this longest path (Why?). Thus, the longest path contains at least :math:`k+1` vertices (including :math:`v_l` and its :math:`k` neighbors).

Now, consider the smallest index :math:`j` such that there is an edge from :math:`v_l` to :math:`v_j` (i.e., we select the leftmost vertex in the path to maximize the cycle length). The cycle formed is 
:math:`v_j, v_{j+1}, \ldots, v_l, v_j`.
We assert that the length of this cycle is at least :math:`k+1` (Why?).

.. |شکل۱| image:: images/figure1.png
.. |شکل۲| image:: images/figure2.png

A Few More Definitions
--------------------------------------
**Underlying Graph:**
If we remove the directions from the edges of a directed graph, the resulting graph is called the underlying graph. For example, |شکل۱| is the underlying graph for |شکل۲|.

