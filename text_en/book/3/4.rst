Strongly Connected Components
===================================================================================

In graph theory, a **strongly connected component** (SCC) of a directed graph is a maximal subset of vertices where each vertex is reachable from every other vertex in the subset. Kosaraju's algorithm is one of the most efficient methods for finding SCCs. Below is its implementation:

.. code-block:: cpp
   :linenos:

   // Find strongly connected components using Kosaraju's algorithm
   vector<int> order;
   void dfs1(int u) {
       vis[u] = true;
       for (int v : adj[u])
           if (!vis[v])
               dfs1(v);
       order.push_back(u);
   }

   vector<vector<int>> components;
   void dfs2(int u, vector<int>& component) {
       vis[u] = true;
       component.push_back(u);
       for (int v : adjT[u])  // Transpose graph
           if (!vis[v])
               dfs2(v, component);
   }

   void kosaraju() {
       order.clear();
       components.clear();
       
       fill(vis.begin(), vis.end(), false);
       for (int u = 0; u < n; u++)
           if (!vis[u])
               dfs1(u);
               
       fill(vis.begin(), vis.end(), false);
       reverse(order.begin(), order.end());
       
       for (int u : order)
           if (!vis[u]) {
               vector<int> component;
               dfs2(u, component);
               components.push_back(component);
           }
   }

.. image:: /images/fig-scc.png

Steps of Kosaraju's algorithm:

1. **First DFS pass**: Perform a depth-first search (DFS) on the original graph and record vertices in the order of their completion times (post-order traversal). Store them in a stack.

2. **Graph transpose**: Create the transpose (reversed) graph by reversing all edge directions.

3. **Second DFS pass**: Process vertices in decreasing order of finishing times from the first pass. For each unvisited vertex, perform DFS on the transposed graph to find its strongly connected component.

Important notes:

- Time complexity is *O(n + m)*, where *n* is the number of vertices and *m* the number of edges.
- The algorithm relies on the property that the SCC structure of a graph and its transpose are identical.
- The order of vertices in the first DFS determines the discovery order of components in the second pass.

Basic Concepts
-------------------------------------------------------------

.. code-block:: python
   :linenos:

   class Graph:
       def __init__(self):
           self.vertices = []  # لیست رأسها
           self.edges = []     # لیست یالها

**Definition 3.4.1 (Strongly Connected Vertex Pair)**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In a directed graph, we say the vertex pair 
:math:`(v, u)`
is strongly connected if and only if there exists a path from 
:math:`v`
to 
:math:`u`
and a path from 
:math:`u`
to 
:math:`v`
.

For example, in Figure 1, vertices 2 and 4 form a strongly connected vertex pair.

**Definition 3.4.2 (Strongly Connected Graph)**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A strongly connected graph is a directed graph where every pair of vertices is strongly connected (Figure 1).

.. figure:: /_static/scc_1.png
 :width: 50%
 :align: left
 :alt: If internet connection is poor, this appears

**Definition 3.4.3 (Strongly Connected Component (SCC))**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A strongly connected component in a directed graph 
:math:`G`
is a subset of vertices of 
:math:`G`
whose induced subgraph forms a strongly connected graph, and is maximal—meaning no additional vertex can be included in it.

.. _lemma-3-4-4:

**Lemma 3.4.4**  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
**Lemma Statement:** Every vertex  
:math:`v`  
in a directed graph  
:math:`G`  
belongs to exactly one unique strongly connected component.  

**Proof:** We use proof by contradiction. Suppose  
:math:`v`  
is in two strongly connected components  
:math:`H`  
and  
:math:`L`,  
and let  
:math:`u`  
be a vertex in  
:math:`L`  
that is not in  
:math:`H`.  
Since  
:math:`u`  
and  
:math:`v`  
are in the same strongly connected component, every vertex in  
:math:`H`  
can reach  
:math:`v`  
via a path, and from  
:math:`v`,  
there exists a path to  
:math:`u`.  
Similarly, there is a path from  
:math:`u`  
to  
:math:`v`,  
and from  
:math:`v`  
to any arbitrary vertex in  
:math:`H`.  
Hence, vertex  
:math:`u`  
could be added to component  
:math:`H`,  
contradicting the maximality of  
:math:`H`.  
This contradiction proves the validity of the lemma.

**Result 3.4.5**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Any directed graph 
:math:`G`
can be partitioned into its strongly connected components. Figure 2 shows a directed graph where its strongly connected components are specified.

.. figure:: /_static/scc_2.png
 :width: 50%
 :align: left
 :alt: اگه اینترنت یارو آشغال باشه این میاد

**Definition 3.4.6 (Inverse Graph)**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The inverse graph of 
:math:`G` 
is the graph obtained by reversing the direction of all edges in graph 
:math:`G`. 
Note that a graph is strongly connected if and only if its inverse is also strongly connected.

.. Without cycles in strongly connected components
--------------------------------------------------------------------------

**Definition 3.4.7 (Condensed Graph of Strongly Connected Components)**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let 
:math:`G`
be an arbitrary directed graph, and let 
:math:`H`
be a directed graph where each vertex corresponds to a strongly connected component in 
:math:`G`
, and each strongly connected component in 
:math:`G`
maps to exactly one vertex in 
:math:`H`.
If 
:math:`v`
is a vertex in 
:math:`H`,
we denote the strongly connected component corresponding to 
:math:`v`
in 
:math:`G`
by 
:math:`F(v)`. 
For any two vertices 
:math:`v`
and 
:math:`u`
in 
:math:`H`,
there exists a directed edge from 
:math:`v`
to 
:math:`u`
for every directed edge from vertices in 
:math:`F(v)`
to vertices in 
:math:`F(u)`
in 
:math:`G`.
Similarly, every edge from 
:math:`v`
to 
:math:`u`
in 
:math:`H`
corresponds to an edge from vertices in 
:math:`F(v)`
to vertices in 
:math:`F(u)`
in 
:math:`G`.
In this case, 
:math:`H`
is called a **condensed graph of strongly connected components** of 
:math:`G`.

.. _theorem-3-4-8:

**Theorem 3.4.8**  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
**Theorem Statement:** The condensed graph of strongly connected components has no cycles.  

**Proof:** Let  
:math:`G`  
be an arbitrary directed graph and  
:math:`H`  
be the condensed graph of the strongly connected components of  
:math:`G`.  
We use proof by contradiction. Suppose  
:math:`H`  
has a cycle, and let two vertices  
:math:`v`  
and  
:math:`u`  
in  
:math:`H`  
lie on this cycle. Since in a strongly connected component, there exists a directed path from every vertex to every other vertex in the same component, it follows that there must be a directed path from every vertex in  
:math:`F(v)`  
to every vertex in  
:math:`F(u)`  
and vice versa (why?). This implies that the vertices of  
:math:`F(v)`  
and  
:math:`F(u)`  
must belong to the same strongly connected component, contradicting the maximality assumption of the strongly connected components. Hence,  
:math:`H`  
cannot have a cycle, and the theorem is proved.

**Result 3.4.9**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
According to Theorem 3.3.2, the vertices of the condensed graph of strongly connected components can be topologically sorted. Therefore, the strongly connected components of any directed graph can be arranged in topological order such that all edges between two distinct components point in the same direction (Figure 3).

.. figure:: /_static/scc_3.png
 :width: 50%
 :align: left
 :alt: If the internet connection is bad, this image appears

Finding Strongly Connected Components
------------------------------------------------------------------------------

Now we aim to present an algorithm with appropriate time complexity for finding the strongly connected components of a graph.

.. _kosaraju-algorithm:

Kosaraju's Algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Description:** First, we perform a 
:math:`DFS` 
on the entire graph. Each time we exit a vertex, we push it onto a stack (note that the later we exit a vertex, the higher it is placed in the stack). Now, we consider the reversed graph. In each step, among all unseen vertices, we take the vertex at the top of the stack (e.g., 
:math:`v`), perform a 
:math:`DFS` 
starting from it in the reversed graph, and assign 
:math:`v` 
and all vertices visited during this 
:math:`DFS` 
to a new component. We repeat this process until all strongly connected components (SCCs) are found. Note that during the 
:math:`DFS` 
on the reversed graph, once a vertex is visited, it is marked as seen and will not be revisited in subsequent traversals.

**Correctness Proof:** To prove the correctness of this algorithm, we first consider the following lemma, similar to one discussed in the previous section.

We define 
:math:`f(v)` 
as the finishing time of the traversal for vertex 
:math:`v`. In other words, it determines the position of the vertex in the stack (the larger 
:math:`f(v)` 
is, the lower the vertex is placed in the stack).

**Lemma 1:** If 
:math:`f(u) > f(v)` 
(i.e., vertex 
:math:`u` 
is higher than vertex 
:math:`v` 
in the stack) and there is a path from 
:math:`v` 
to 
:math:`u`, then there must also be a path from 
:math:`u` 
to 
:math:`v`.

**Proof of Lemma 1:** We use proof by contradiction. Assume there is a path from 
:math:`v` 
to 
:math:`u` 
but no path from 
:math:`u` 
to 
:math:`v`.

Since we have already visited vertex 
:math:`u` 
during the initial traversal (why?), and there is no path from 
:math:`u` 
to 
:math:`v`, we would not traverse 
:math:`v` 
until the traversal of 
:math:`u` 
is completed. However, if the traversal of 
:math:`u` 
finishes and 
:math:`v` 
remains unseen, 
:math:`u` 
would be added to the stack before 
:math:`v`, implying 
:math:`f(u) < f(v)`. This contradicts our assumption. Thus, the lemma is proven.

Now, note that during the traversal of the reversed graph, we move along reversed edges. We take the vertex 
:math:`v` 
at the top of the stack and traverse all vertices 
:math:`x` 
for which there is a path from 
:math:`x` 
to 
:math:`v` 
in the reversed graph. According to Lemma 1, vertex 
:math:`v` 
also has a path to 
:math:`x` 
in the original graph. Therefore, 
:math:`v` 
and all vertices visited during the 
:math:`DFS` 
from 
:math:`v` 
in the reversed graph belong to the same SCC.

Furthermore, no other vertices can belong to this SCC. If another vertex were part of this component, it would have a path to 
:math:`v` 
and thus would have been visited during the 
:math:`DFS` 
from 
:math:`v`.

**Algorithm Complexity**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In the above algorithm, we used :math:`DFS` only twice. Therefore, the algorithm's complexity is :math:`O(n + m)`, where :math:`m` and :math:`n` represent the number of vertices and edges, respectively.

**Lemma 3.4.10**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Lemma Statement:** Kosaraju's algorithm finds strongly connected components in the topological order of their sorted sequence.

**Proof:** We prove the claim by induction on the number of strongly connected components. The base case with one component is trivial. Assuming the claim holds for 
:math:`n-1`
components, we prove it for 
:math:`n`
components. Suppose the first component found by the algorithm (e.g., 
:math:`H`
) has an incoming edge from another component 
:math:`L`
. In the reversed graph, this implies an edge exists from 
:math:`H`
to 
:math:`L`
. However, since 
:math:`L`
is discovered after 
:math:`H`
in the algorithm, during the traversal of 
:math:`H`
in the reversed graph, some vertices of 
:math:`L`
would be visited and mistakenly included in 
:math:`H`
—a contradiction, as components cannot overlap. Thus, the first component discovered has no incoming edges from other components and must be the first in the topological order. By the induction hypothesis, the remaining components are also discovered in topological order (why?). This completes the proof.

**Algorithm Implementation**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Note that at the end of the code, we output the components sorted in their topological order.

.. code-block:: cpp

	const int MX = 5e5 + 5;

	int n, m; /// tedad ras ha va yal ha
	vector<int> gr[MX], back_gr[MX], comp[MX]; /// vector mojaverat, vector mojaverat(yal haie barax), moalefe haie ghavian hamband
	stack<int> sk; /// moratab kardan ras ha barhasbe tamam shodan dfs
	bool mark[MX]; /// array mark baraie check kardane dide shodan ras ha

	void dfs(int v){  /// dfs mamoli!
	    mark[v] = 1;
	    for(int u: gr[v])
			if(!mark[u])
		 	   dfs(u);
	    sk.push(v);
	}

	void back_dfs(int v, int cnt){  /// dfs roie yal haie barax!
	    mark[v] = 1;
	    comp[cnt].push_back(v);
	    for(int u: back_gr[v])
			if(!mark[u])
			    back_dfs(u, cnt);
	}

	int main(){
	    cin >> n >> m;
	    for(int i = 0; i < m; i++){
			int v, u;
			cin >> v >> u; /// shomare ras ha 0-based hast.
			gr[v].push_back(u); /// in vector yal ha ra zakhire mikonad
			back_gr[u].push_back(v); /// in vector barax yal ha ra zakhire mikonad
	    }
	    for(int i = 0; i < n; i++)
			if(!mark[i])
			    dfs(i);
	    fill(mark, mark + n, 0); /// chon mikhahim dfs jadid bezanim, mark ra 0 mikonim.
	    int cnt = 0;
	    while(sk.size() != 0){ /// stack kheili kond ast. dar inja serfan baraie dark behtar stack estefade shode. behtar ast az vector estefade konid.
			if(!mark[sk.top()]){
				back_dfs(sk.top(), cnt); /// yek moalefe ra peida mikonim
				cnt++;
			}
			sk.pop();
	    }
	    /// moalefe hara be tartib topo sort eshan chap mikonim
	    for(int i = 0; i < cnt; i++){
			cout << i << ": ";
			for(auto v: comp[i])
				cout << v << ' ';
			cout << endl;
	    }
	    return 0;
	}

