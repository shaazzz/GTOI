Matching in General Graphs
========================

In previous chapters, we examined the necessary and sufficient condition for the existence of a perfect matching in bipartite graphs. In this section, we will investigate the existence of a perfect matching in any general graph.

Tat's Theorem
-------------------

For any subset :math:`S` of vertices (which can also be empty), let :math:`O(S)` be the number of connected components with an odd number of vertices, if we remove the vertices of :math:`S` from the graph.

Tutte's Theorem states that the following condition is necessary and sufficient:

:math:`\forall_S : |S| \geq O(S)`

Tutte's condition is clearly necessary for the existence of a perfect matching. For proof, consider a set :math:`S` such that :math:`|S| < O(S)`. In this case, for a perfect matching to exist, one vertex from each odd component counted in :math:`O(S)` must be matched to a vertex in :math:`S`. Since we stated :math:`|S| < O(S)`, finding a perfect matching is not possible.

To prove the sufficiency of the condition, we use an extremal argument. That is, by contradiction, assume that graph :math:`G` does not have a perfect matching and Tutte's condition holds in it. Note that adding an edge to graph :math:`G` maintains Tutte's condition (why?). So our general idea is to add an edge that is not present in our graph until a perfect matching is formed. Eventually, we reach a maximal graph :math:`H` such that:

- Tutte's condition holds in it.
- It does not contain a perfect matching.
- For every edge :math:`uv` not in :math:`H`, if we add it to :math:`H`, a perfect matching will be formed.

Now our goal is to prove that graph :math:`H` already has a perfect matching (in which case, we reach a contradiction with our assumption, and the problem is proven).

First, note that Tutte's condition holding for :math:`S = \phi` implies that :math:`H` has no connected components with an odd number of vertices, which means the total number of vertices in the graph is even.

- **Pear** : Vertices :math:`a,b,c,d` such that :math:`ab,ac` are edges of the graph, but :math:`bc,ad` are not edges of the graph.

- **Apple** : Vertices :math:`a,b,c` such that :math:`ab,ac` are edges of the graph, but :math:`bc` is not an edge of the graph.

.. figure:: /_static/sib_golabi.png
   :width: 50%
   :align: center
   :alt: If the user's internet is bad, this will show

We claim that if we can find a "pear" in :math:`H`, we can prove that :math:`H` contains a perfect matching. So, consider an arbitrary "pear" and its vertices :math:`a,b,c,d` as per the definition.

If you add edge :math:`ad` to :math:`H`, a matching :math:`M1` will exist in it, which includes :math:`ad`.

If you add edge :math:`bc` to :math:`H`, a matching :math:`M2` will exist in it, which includes :math:`bc`.

Now consider :math:`M = M1 \Delta M2`. According to the material discussed in previous sections, the edges of :math:`M` form a set of cycles.

If edges :math:`ad` and :math:`bc` are in two different cycles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Then, from the cycle containing :math:`ad`, choose edges of :math:`M2`, and from the cycle containing :math:`bc`, choose edges of :math:`M1` (from the remaining cycles, choose edges of :math:`M1` or :math:`M2` arbitrarily, and also choose edges that are in :math:`M1 \cap M2`). In this case, we will have a perfect matching in :math:`H`!

If edges :math:`ad` and :math:`bc` are in the same cycle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, we must state that this cycle is even. Now, since :math:`bc` is one of the edges of the cycle, :math:`b,c` are two consecutive vertices in the cycle. Therefore, it happens that for exactly one of the edges :math:`ab` or :math:`ac`, the following occurs:

If we remove the vertices at the ends of the edge, our cycle will turn into two even-vertex paths.

Without loss of generality, suppose this edge is :math:`ab`. Now, choose edge :math:`ab` for the matching. Then, remove :math:`a,b` from the graph and alternately choose edges from the two even-vertex paths formed for the matching. In this way, all vertices of our cycle will be covered by the selected edges. Similarly, from the remaining cycles, arbitrarily choose edges from :math:`M1` or :math:`M2`, and also choose edges that are in :math:`M1 \cap M2`. In this case, we will have a perfect matching in :math:`H`!

What if we don't have a pear?
~~~~~~~~~~~~~~~~~~~~~~~~~

In the two sections above, we proved that if graph :math:`H` has a pear, then :math:`H` contains a perfect matching. Now we must also consider cases where no pear exists in :math:`H`.

Consider the set :math:`C` to include all vertices of :math:`H` that have edges to all other vertices (their degree is :math:`n-1`).

Now, if :math:`C` includes all vertices of :math:`H`, this means that :math:`H` is a clique (and has an even number of vertices). Thus, a perfect matching clearly exists in it.

So consider the graph :math:`W = H-C`. In :math:`W`, for every vertex like :math:`u`, there exists a vertex like :math:`v` such that there is no edge between :math:`u` and :math:`v` (why?). Thus, if we can find an apple in :math:`W`, then we can also find a pear (because it is sufficient to find a vertex :math:`d` for vertex :math:`a` in the apple such that there is no edge between :math:`a` and :math:`d`).

So if an apple exists in :math:`W`, the problem is solved. Now, assume that no apple exists in :math:`W`. In this case, for any arbitrary :math:`a,b,c` such that :math:`ab,ac` are edges of the graph, :math:`bc` must also be an edge of this graph. Consider an arbitrary vertex like :math:`u`, and let :math:`A` be the set containing :math:`u` itself and its neighbors. There must be an edge between any two vertices in :math:`A` (why?). Also, no vertex outside :math:`A` has an edge to :math:`A` (why?). Therefore, it can be concluded that every connected component in :math:`W` is a clique. Match vertices arbitrarily within each clique. Exactly one vertex remains unmatched from each odd-sized clique. Since Tutte's condition holds for :math:`S = C`, all remaining unmatched vertices in :math:`W` can be matched to vertices in :math:`C`. Finally, we arbitrarily match all remaining unmatched vertices in :math:`C` (which form an even-sized clique). Thus, we have found a perfect matching in :math:`H`.

More General Matching or k-factor
-------------------------------

By definition, a perfect matching in graph :math:`G` means a subset of graph edges, like :math:`M`, where the degree of each vertex in :math:`M` is exactly 1.

Now we want to generalize this definition. Suppose :math:`a_1,a_2,...,a_n` are given, and we need to determine if there exists a subset of graph edges, like :math:`M`, in which the degree of each vertex :math:`u` becomes :math:`a_u`?

A Wrong Idea
~~~~~~~~~~~~~~~~~~

Probably the first idea that comes to mind is to copy vertex :math:`u` exactly :math:`a_u` times, then for each edge :math:`uv` in :math:`G`, add an edge between all copies of :math:`u` and :math:`v`. Then check if a perfect matching exists in the new graph.

This idea is very similar to what we discussed previously in the bipartite matching chapter, but it has a very subtle mistake. The problem is that we might simultaneously use several edges between :math:`u` and :math:`v` in the matching, and this causes us to use one edge multiple times, which is not desired by the problem.

The Correct Solution
~~~~~~~~~~~~~~~~~~~~

Let :math:`d_u` be the degree of vertex :math:`u`. We construct graph :math:`G^{\prime}` from graph :math:`G` as follows:

For each vertex :math:`u`, we place a complete bipartite graph! Such that its first part has :math:`d_u - a_u` vertices, and its second part has :math:`d_u` vertices. We call the bipartite graph corresponding to vertex :math:`u`, :math:`B_u`. Then, consider the edges of graph :math:`G` in an arbitrary order and add their counterparts (as we will describe) to graph :math:`G^{\prime}`. Suppose the :math:`i`-th edge we examine is :math:`uv`, and before it, we have examined :math:`c1` edges incident to :math:`u` and :math:`c2` edges incident to :math:`v`. Now, the counterpart of edge :math:`uv` will be an edge between the following two vertices:

- The :math:`c1`-th vertex of the **second part** of graph :math:`B_u`
- The :math:`c2`-th vertex of the **second part** of graph :math:`B_v`

Now we claim that the existence of a subset :math:`M` of edges that satisfies the problem's condition is equivalent to the existence of a perfect matching in graph :math:`G^{\prime}`!

Note that in this graph, each edge in the original graph has exactly one corresponding edge, so the previous problem (using an edge multiple times) does not arise. The complete proof of the correctness of the above theorem is left to the reader.

.. figure:: /_static/k_factor.png
   :width: 50%
   :align: center
   :alt: If the user's internet is bad, this will show
