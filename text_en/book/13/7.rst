.. _matchings-in-general-graphs:

Matchings in General Graphs
===========================

In previous chapters, we examined the necessary and sufficient conditions for the existence of a perfect matching in bipartite graphs. In this section, we will investigate the existence of perfect matchings in arbitrary graphs.

.. code-block:: python
   :linenos:

   def add(a, b):
       # در اینجا دو عدد a و b را با هم جمع می کنیم
       return a + b


   def subtract(a, b):
       return a - b  # این تابع a را از b کم می کند


.. figure:: /_static/sib_golabi.png
   :width: 50%
   :align: center
   :alt: If the internet is crappy this will appear


Tutte's Theorem
-------------------

For any subset :math:`S` of vertices (which can be empty), let :math:`O(S)` be the number of connected components of odd size after removing the vertices in :math:`S` from the graph.

Tutte's theorem states that the following condition is necessary and sufficient:

:math:`\forall_S : |S| \geq O(S)`

Tutte's condition is clearly necessary for the existence of a perfect matching. To prove necessity, assume for some set :math:`S` we have :math:`|S| < O(S)`. In this case, for a perfect matching to exist, each odd component counted in :math:`O(S)` must have a vertex matched to a vertex in :math:`S`. Since :math:`|S| < O(S)`, finding a perfect matching becomes impossible.

To prove sufficiency, we use an extremal argument. By contradiction, assume graph :math:`G` has no perfect matching but satisfies Tutte's condition. Note that adding edges to :math:`G` preserves Tutte's condition (why?). The main idea is to iteratively add missing edges to :math:`G` until a perfect matching emerges. Eventually, we obtain a maximal graph :math:`H` such that:

- Tutte's condition holds in :math:`H`.
- :math:`H` has no perfect matching.
- Adding any missing edge :math:`uv` to :math:`H` results in a perfect matching.

Our goal is to show that :math:`H` already contains a perfect matching (leading to a contradiction).

First, observe that Tutte's condition for :math:`S = \phi` implies :math:`H` has no odd-sized connected components, so the total number of vertices is even.

- **Pear**: Vertices :math:`a, b, c, d` such that :math:`ab` and :math:`ac` are edges, but :math:`bc` and :math:`ad` are not edges.

- **Apple**: Vertices :math:`a, b, c` such that :math:`ab` and :math:`ac` are edges, but :math:`bc` is not an edge.

We claim that if a "pear" exists in :math:`H`, we can prove :math:`H` contains a perfect matching. Consider an arbitrary pear with vertices :math:`a, b, c, d` as defined.

If we add edge :math:`ad` to :math:`H`, a perfect matching :math:`M1` containing :math:`ad` must exist.

If we add edge :math:`bc` to :math:`H`, a perfect matching :math:`M2` containing :math:`bc` must exist.

Now consider :math:`M = M1 \Delta M2` (symmetric difference). As discussed earlier, the edges of :math:`M` form a collection of cycles.

If edges :math:`ad` and :math:`bc` lie in distinct cycles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Then, from the cycle containing :math:`ad`, select edges from :math:`M2`, and from the cycle containing :math:`bc`, select edges from :math:`M1` (choose edges from :math:`M1` or :math:`M2` arbitrarily for other cycles, and keep edges in :math:`M1 \cap M2`). This results in a perfect matching in :math:`H`!

If Edges :math:`ad` and :math:`bc` Are in a Cycle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, we must state that this cycle is even. Now since :math:`b,c` is one of the cycle's edges, :math:`b,c` are two consecutive vertices in the cycle. Therefore, if exactly one of the edges :math:`ab` or :math:`ac` satisfies the following condition:

If we remove the endpoints of the edge from the graph, our cycle will split into two even-length paths.

Without loss of generality, assume this edge is :math:`ab`. Now select edge :math:`ab` for the matching. Then remove :math:`a,b` from the graph and alternately choose edges from the two resulting even-length paths for the matching. In this case, all vertices of our cycle will be covered by the selected edges. Similar to before, arbitrarily choose edges from :math:`M1` or :math:`M2` for the remaining cycles, and also select edges in :math:`M1 \cap M2`. This way, we will have a perfect matching in :math:`H`!

If We Don't Have a Pear?
~~~~~~~~~~~~~~~~~~~~~~~~~

In the previous two sections, we proved that if graph :math:`H` contains a pear, then :math:`H` has a perfect matching. Now we must also consider cases where :math:`H` does not contain a pear.

Let set :math:`C` consist of all vertices in :math:`H` that have edges to all other vertices (their degree is :math:`n-1`).

If :math:`C` contains all vertices of :math:`H`, this means :math:`H` is a clique (and has an even number of vertices). Thus, it clearly has a perfect matching.

Now consider the graph :math:`W = H - C`. In :math:`W`, for every vertex :math:`u`, there exists a vertex :math:`v` such that there is no edge between :math:`uv` (why?). Therefore, if we can find an *apple* in :math:`W`, we can also find a pear (since it suffices to find a vertex :math:`d` for vertex :math:`a` in the apple such that there is no edge between :math:`a` and :math:`d`).

Thus, if an apple exists in :math:`W`, the problem is solved. Hence, assume there is no apple in :math:`W`. In this case, for any arbitrary vertices :math:`a, b, c` where :math:`ab` and :math:`ac` are edges of the graph, :math:`bc` must also be an edge of this graph. Consider an arbitrary vertex :math:`u` and let set :math:`A` consist of :math:`u` and all its adjacent vertices. Between any two vertices in :math:`A`, there must be an edge (why?). Also, no vertex outside :math:`A` has an edge to :math:`A` (why?). Therefore, we can conclude that every connected component in :math:`W` is a clique. 

Arbitrarily match the vertices within each clique. Exactly one vertex will remain unmatched in each odd-sized clique. Since Tutte's condition is satisfied for :math:`S = C`, all remaining unmatched vertices in :math:`W` can be matched to vertices in :math:`C`. Finally, we arbitrarily match all remaining vertices in :math:`C` (which form a clique with an even number of vertices). Thus, we have found a perfect matching in :math:`H`.

..  
   Keep the code unchanged, including white spaces, only change the comments
   that are Finglish.
   
   Keep any image insertions and code sections unchanged—only translate the Persian text.
   Be loyal and faithful to the persian text

The More Generalized Case of Matching or k-factor
-------------------------------------------------

By definition, a **perfect matching** in graph :math:`G` refers to a subset of the graph's edges, denoted :math:`M`, where in :math:`M` the degree of every vertex is exactly 1.

Now we want to generalize this definition. Suppose :math:`a_1,a_2,\ldots,a_n` are given, and we need to determine whether there exists a subset of the graph's edges :math:`M` such that the degree of each vertex :math:`u` in :math:`M` equals :math:`a_u`?

At first glance, this problem appears far more general and harder than matching. However, in this section, we aim to solve it using matching itself.

A Flawed Idea
~~~~~~~~~~~~~~~~~~

Probably the first idea that comes to mind is to copy vertex :math:`u` exactly :math:`a_u` times, then for each edge :math:`uv` in :math:`G`, create edges between all copies of :math:`u` and :math:`v`. Then check whether the new graph contains a perfect matching.

This idea is very similar to what we previously examined in the chapter on bipartite matching, but it has a subtle flaw. The issue is that we might simultaneously use multiple edges between :math:`u` and :math:`v` in the matching, effectively reusing a single edge multiple times - which violates the problem's constraints.

Correct Solution
~~~~~~~~~~~~~~~~~~~~

Let :math:`d_u` be the degree of vertex :math:`u`. We construct graph :math:`G^{\prime}` from graph :math:`G` as follows:

For each vertex :math:`u`, we place a complete bipartite graph such that the first part contains :math:`d_u - a_u` vertices and the second part contains :math:`d_u` vertices. We call the bipartite graph corresponding to vertex :math:`u` :math:`B_u`. Then, consider the edges of graph :math:`G` in an arbitrary order and add their corresponding edges (as we will describe) to graph :math:`G^{\prime}`. 

Suppose the :math:`i`-th edge we examine is :math:`uv`, and prior to this, we have examined :math:`c1` edges adjacent to :math:`u` and :math:`c2` edges adjacent to :math:`v`. Now, the corresponding edge of :math:`uv` will be the edge between the following two vertices:

- The :math:`c1`-th vertex of the **second part** of graph :math:`B_u`
- The :math:`c2`-th vertex of the **second part** of graph :math:`B_v`

We claim that the existence of a subset :math:`M` of edges satisfying the problem's condition is equivalent to the existence of a perfect matching in graph :math:`G^{\prime}`!

Note that in this graph, each edge in the original graph corresponds to exactly one edge, thus avoiding the previous issue (using an edge multiple times). The complete proof of the correctness of the above theorem is left to the reader.

.. figure:: /_static/k_factor.png
 :width: 50%
 :align: center
 :alt: This appears if the internet connection is poor.

