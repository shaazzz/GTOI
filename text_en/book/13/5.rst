Maximum Flow and Matching
======================

We became familiar with the maximum flow problem in the previous chapter. Here, we will learn about another application of this problem, which is solving the matching problem and its generalizations.

Solving the Maximum Matching Problem in Bipartite Graphs
----------------------------------------
This problem can be solved using the maximum flow problem. To do this, add two vertices, a source and a sink, to the bipartite graph. Add edges from the source to all vertices in the upper partition with capacity one, and from vertices in the lower partition to the sink with capacity one. For each edge in the bipartite graph, draw an edge with capacity one from the upper vertex to the lower vertex. (As shown in the figure)

.. figure:: /_static/flow_matching.svg
   :width: 50%
   :align: center
   :alt: If the user's internet is bad, this appears

In this graph, the largest matching is the same as the maximum flow.


Weighted Maximum Matching
----------------------
In this problem, each edge has a value, and the value of a matching is the sum of the values of its edges. Various problems can be formulated for weighted matching, such as matching with the highest value, maximum matching with the highest value, or matching with a specific size and highest value. These problems can be solved using a generalization of the maximum flow problem, which we will examine below. It would be beneficial to try to think about this problem yourself while reading and solve it before reaching the solution section.

Min-Cost Flow
----------------------
In this problem, the goal is to find a flow that has the minimum cost. The cost of any flow is equal to the sum of (flow passing through each edge * cost of that edge) for all edges. We want to find the minimum cost for all integer flow values (from 0 to maximum flow).

Solution
~~~~~~~~
We use a method similar to the Ford-Fulkerson method that we learned in the previous chapter. The difference is that instead of choosing an arbitrary path, we choose the path with the minimum cost and then send one unit of flow through it. We continue this process until no more flow can be sent. At each step, the obtained cost is the minimum possible cost for that amount of flow. According to the correctness of Ford's algorithm, this algorithm finds the answer up to the maximum flow.

Proof of Optimality
~~~~~~~~~~~~~~
Similar to the proof of correctness for Ford's algorithm, it can be proven that at each step, if f is the target flow amount and c is its cost, and the shortest path from source to sink is x, then in the constructed graph, if f-1 is the target flow amount, the minimum cost to send this amount of flow is c-x.

Complexity Analysis
~~~~~~~~~~~~~~~~
To find the shortest path, we can use the SPFA algorithm (since we have negative edges, Dijkstra's algorithm cannot be used), which has a time complexity of :math:`O(E)`. So, the total time complexity is :math:`O(fE)`.

Solution for Weighted Maximum Matching
-----------------------------
We construct a graph similar to the one above, with the difference that the source and sink edges have infinite capacity, and the middle edges have capacity one and their cost is equal to the edge weight. Then, using the min-cost flow algorithm, all the above problems can be answered.
